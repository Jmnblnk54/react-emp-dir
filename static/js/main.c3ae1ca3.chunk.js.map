{"version":3,"sources":["utils/EmpAreaContext.js","components/DataBody.js","components/EmpTable.js","components/NameSearch.js","components/Nav.js","utils/API.js","components/DataArea.js","components/Main.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["EmpAreaContext","React","createContext","DataBody","context","useContext","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","key","uuid","data-th","className","src","medium","alt","first","last","href","target","EmpTable","id","headings","width","style","onClick","handleSort","NameSearch","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","axios","get","DataArea","useState","users","order","setDeveloperState","useEffect","API","then","results","data","Provider","value","event","filter","filteredList","item","toLowerCase","indexOf","console","log","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","updatedHeadings","length","Body","Wrapper","children","Header","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3ae1ca3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst EmpAreaContext = React.createContext({});\r\n\r\nexport default EmpAreaContext;","import React, { useContext } from 'react';\r\nimport EmpAreaContext from '../utils/EmpAreaContext';\r\n\r\nconst DataBody = () => {\r\n\tconst context = useContext(EmpAreaContext);\r\n\r\n\treturn (\r\n\t\t<tbody>\r\n\t\t\t{context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\r\n\t\t\t\tcontext.developerState.filteredUsers.map(({ login, name, picture, phone, email }) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<tr key={login.uuid}>\r\n\t\t\t\t\t\t\t<td data-th=\"Image\" className=\"align-middle\">\r\n\t\t\t\t\t\t\t\t<img src={picture.medium} alt={'profile image for ' + name.first + ' ' + name.last} className=\"img-responsive\" />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td data-th=\"Name\" className=\"name-cell align-middle\">\r\n\t\t\t\t\t\t\t\t{name.first} {name.last}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td data-th=\"Phone\" className=\"align-middle\">\r\n\t\t\t\t\t\t\t\t{phone}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td data-th=\"Email\" className=\"align-middle\">\r\n\t\t\t\t\t\t\t\t<a href={'mailto:' + email} target=\"__blank\">\r\n\t\t\t\t\t\t\t\t\t{email}\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t) : (\r\n\t\t\t\t<></>\r\n\t\t\t)}\r\n\t\t</tbody>\r\n\t);\r\n};\r\n\r\nexport default DataBody;","import React, { useContext } from 'react';\r\nimport DataBody from './DataBody';\r\nimport EmpAreaContext from '../utils/EmpAreaContext';\r\n\r\nconst EmpTable = () => {\r\n\tconst context = useContext(EmpAreaContext);\r\n\r\n\treturn (\r\n\t\t<div className=\"datatable mt-5\">\r\n\t\t\t<table id=\"table\" className=\"table table-striped table-hover table-condensed\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t{context.developerState.headings.map(({ name, width }) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<th\r\n\t\t\t\t\t\t\t\t\tclassName=\"col\"\r\n\t\t\t\t\t\t\t\t\tkey={name}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tcontext.handleSort(name);\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{name}\r\n\t\t\t\t\t\t\t\t\t<span className=\"pointer\"></span>\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<DataBody />\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default EmpTable;","import React, { useContext } from \"react\";\r\nimport EmpAreaContext from \"../utils/EmpAreaContext\";\r\n\r\nconst NameSearch = () => {\r\n  const context = useContext(EmpAreaContext);\r\n\r\n  return (\r\n    <div className=\"searchbox\">\r\n      <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">\r\n              Search\r\n            </span>\r\n          </div>\r\n          <input\r\n          className=\"form-control mr-sm-2\"\r\n          type=\"search\"\r\n          placeholder=\"name\"\r\n          aria-label=\"Search\"\r\n          onChange={e => context.handleSearchChange(e)}\r\n        />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default NameSearch;","import React from \"react\";\r\nimport NameSearch from \"./NameSearch\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      {/* <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button> */}\r\n      <div className=\"collapse navbar-collapse row\" id=\"navbarNav\">\r\n                <div className=\"search-area col-4\">\r\n          <NameSearch />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Nav;","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api?results=20\";\r\n\r\n\r\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\r\nexport default {\r\n  search: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport EmpTable from './EmpTable';\r\nimport Nav from './Nav';\r\nimport API from '../utils/API';\r\nimport EmpAreaContext from '../utils/EmpAreaContext';\r\n\r\nconst DataArea = () => {\r\n\tconst [developerState, setDeveloperState] = useState({\r\n\t\tusers: [],\r\n\t\torder: 'descend',\r\n\t\tfilteredUsers: [],\r\n\t\theadings: [\r\n\t\t\t{ name: 'Image', width: '10%', order: 'descend' },\r\n\t\t\t{ name: 'name', width: '10%', order: 'descend' },\r\n\t\t\t{ name: 'phone', width: '20%', order: 'descend' },\r\n\t\t\t{ name: 'email', width: '20%', order: 'descend' }\r\n\t\t]\r\n\t});\r\n\r\n\tconst handleSort = heading => {\r\n\t\tlet currentOrder = developerState.headings\r\n\t\t\t.filter(elem => elem.name === heading)\r\n\t\t\t.map(elem => elem.order)\r\n\t\t\t.toString();\r\n\r\n\t\tif (currentOrder === 'descend') {\r\n\t\t\tcurrentOrder = 'ascend';\r\n\t\t} else {\r\n\t\t\tcurrentOrder = 'descend';\r\n\t\t}\r\n\r\n\t\tconst compareFunction = (a, b) => {\r\n\t\t\tif (currentOrder === 'ascend') {\r\n\t\t\t\t// account for missing values\r\n\t\t\t\tif (a[heading] === undefined) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else if (b[heading] === undefined) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\t// numerically\r\n\t\t\t\telse if (heading === 'name') {\r\n\t\t\t\t\treturn a[heading].first.localeCompare(b[heading].first);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn a[heading].localeCompare(b[heading]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// account for missing values\r\n\t\t\t\tif (a[heading] === undefined) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else if (b[heading] === undefined) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst sortedUsers = developerState.filteredUsers.sort(compareFunction);\r\n\t\tconst updatedHeadings = developerState.headings.map(elem => {\r\n\t\t\telem.order = elem.name === heading ? currentOrder : elem.order;\r\n\t\t\treturn elem;\r\n\t\t});\r\n\r\n\t\tsetDeveloperState({\r\n\t\t\t...developerState,\r\n\t\t\tfilteredUsers: sortedUsers,\r\n\t\t\theadings: updatedHeadings\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleSearchChange = event => {\r\n\t\tconst filter = event.target.value;\r\n\t\tconst filteredList = developerState.users.filter(item => {\r\n\t\t\tlet values = item.name.first.toLowerCase() + ' ' + item.name.last.toLowerCase();\r\n\r\n\t\t\tif (values.indexOf(filter.toLowerCase()) !== -1) {\r\n\t\t\t\treturn item;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\t\tconsole.log('filteredList', filteredList);\r\n\t\tsetDeveloperState({ ...developerState, filteredUsers: filteredList });\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tAPI.search().then(results => {\r\n\t\t\tsetDeveloperState({\r\n\t\t\t\t...developerState,\r\n\t\t\t\tusers: results.data.results,\r\n\t\t\t\tfilteredUsers: results.data.results\r\n\t\t\t});\r\n\t\t});\r\n  }, []);\r\n  \r\n\treturn (\r\n\t\t<EmpAreaContext.Provider value={{ developerState, handleSearchChange, handleSort }}>\r\n\t\t\t<Nav />\r\n\t\t\t<div className=\"data-area\">{developerState.filteredUsers.length > 0 ? <EmpTable /> : <div></div>}</div>\r\n\t\t</EmpAreaContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default DataArea;","import React from \"react\";\r\nimport DataArea from \"./DataArea\";\r\n\r\nfunction Body() {\r\n  return (\r\n    <>\r\n      <DataArea />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Body;","import React from \"react\";\r\n\r\nfunction Wrapper({ children }) {\r\n  return <div className=\"wrapper\">{ children }</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>React Employee Directory</h1>\r\n      <p>\r\n        Search for a specific Employee\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport Main from \"./components/Main\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return( \n    <div className= \"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}